{"ast":null,"code":"function shuffle(word) {\n  var a = word.split(\"\"),\n      n = a.length;\n\n  for (var i = n - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var tmp = a[i];\n    a[i] = a[j];\n    a[j] = tmp;\n  }\n\n  return a.join(\"\");\n} // Returns a random 5x5 board, using the official letter distribution.\n\n\nexports.RandomGrid = function (size) {\n  let word = \"\";\n  let totalChars = size * size * size;\n  let freqLookUp = [{\n    \"let\": \"A\",\n    \"freq\": .078\n  }, {\n    \"let\": \"B\",\n    \"freq\": .02\n  }, {\n    \"let\": \"C\",\n    \"freq\": .04\n  }, {\n    \"let\": \"D\",\n    \"freq\": .038\n  }, {\n    \"let\": \"E\",\n    \"freq\": .11\n  }, {\n    \"let\": \"F\",\n    \"freq\": .014\n  }, {\n    \"let\": \"G\",\n    \"freq\": .03\n  }, {\n    \"let\": \"H\",\n    \"freq\": .023\n  }, {\n    \"let\": \"I\",\n    \"freq\": .089\n  }, {\n    \"let\": \"J\",\n    \"freq\": .0021\n  }, {\n    \"let\": \"K\",\n    \"freq\": .0097\n  }, {\n    \"let\": \"L\",\n    \"freq\": .053\n  }, {\n    \"let\": \"M\",\n    \"freq\": .027\n  }, {\n    \"let\": \"N\",\n    \"freq\": .072\n  }, {\n    \"let\": \"O\",\n    \"freq\": .061\n  }, {\n    \"let\": \"P\",\n    \"freq\": .028\n  }, {\n    \"let\": \"Q\",\n    \"freq\": .0019\n  }, {\n    \"let\": \"R\",\n    \"freq\": .073\n  }, {\n    \"let\": \"S\",\n    \"freq\": .087\n  }, {\n    \"let\": \"T\",\n    \"freq\": .067\n  }, {\n    \"let\": \"U\",\n    \"freq\": .033\n  }, {\n    \"let\": \"V\",\n    \"freq\": .01\n  }, {\n    \"let\": \"W\",\n    \"freq\": .0091\n  }, {\n    \"let\": \"X\",\n    \"freq\": .0027\n  }, {\n    \"let\": \"Y\",\n    \"freq\": .016\n  }, {\n    \"let\": \"Z\",\n    \"freq\": .0044\n  }];\n  /*       \r\n    freqLookUp.map(litem => {\r\n     word += litem.let.repeat(Math.round(litem.freq * totalChars))\r\n    });\r\n  */\n\n  function iterate(item) {\n    word += item.let.repeat(Math.round(item.freq * totalChars));\n  }\n\n  freqLookUp.forEach(iterate);\n\n  if (word.length > totalChars) {\n    word = word.slice(0, totalChars - word.length);\n  }\n\n  let sortedFreqList = freqLookUp.sort((a, b) => a.freq <= b.freq ? 1 : -1);\n  let dif = totalChars - word.length;\n\n  for (let i = 0; i < dif; i++) {\n    word += sortedFreqList[i].let;\n  }\n\n  const dice = chunk(shuffle(word), size);\n  let chars = dice.map(cube => cube[Math.floor(Math.random() * cube.length)]);\n  chars.sort(() => Math.random() - 0.5); // Shuffle the letters.\n\n  let grid = [];\n\n  for (let row = 0; row < size; row++) {\n    grid[row] = [];\n\n    for (let col = 0; col < size; ++col) {\n      grid[row][col] = chars[size * row + col].toLowerCase();\n      if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\n    }\n  }\n\n  return grid;\n};\n\nfunction chunk(array, size) {\n  const chunked_arr = [];\n  let index = 0;\n\n  while (index < array.length) {\n    chunked_arr.push(array.slice(index, size + index));\n    index += size;\n  }\n\n  return chunked_arr;\n}","map":{"version":3,"sources":["C:/Users/sandesh/Desktop/bogglehw/src/randomGen.js"],"names":["shuffle","word","a","split","n","length","i","j","Math","floor","random","tmp","join","exports","RandomGrid","size","totalChars","freqLookUp","iterate","item","let","repeat","round","freq","forEach","slice","sortedFreqList","sort","b","dif","dice","chunk","chars","map","cube","grid","row","col","toLowerCase","array","chunked_arr","index","push"],"mappings":"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","sourcesContent":["function shuffle(word) {\r\n    var a = word.split(\"\"),\r\n        n = a.length;\r\n\r\n    for(var i = n - 1; i > 0; i--) {\r\n        var j = Math.floor(Math.random() * (i + 1));\r\n        var tmp = a[i];\r\n        a[i] = a[j];\r\n        a[j] = tmp;\r\n    }\r\n    return a.join(\"\");\r\n}\r\n\r\n\r\n\r\n// Returns a random 5x5 board, using the official letter distribution.\r\nexports.RandomGrid = function(size){\r\n  \r\n  let word = \"\";\r\n  let totalChars = size * size * size;\r\n  \r\n  \r\n  let freqLookUp = [{\"let\":\"A\",\"freq\":.078}, {\"let\":\"B\",\"freq\":.02}, {\"let\":\"C\",\"freq\":.04}, {\"let\":\"D\",\"freq\":.038}, {\"let\":\"E\",\"freq\":.11}, {\"let\":\"F\",\"freq\":.014}, {\"let\":\"G\",\"freq\":.03}, {\"let\":\"H\",\"freq\":.023}, {\"let\":\"I\",\"freq\":.089}, {\"let\":\"J\",\"freq\":.0021},\t{\"let\":\"K\",\"freq\":.0097},\r\n                    {\"let\":\"L\",\"freq\":.053}, {\"let\":\"M\",\"freq\":.027}, {\"let\":\"N\",\"freq\":.072}, {\"let\":\"O\",\"freq\":.061}, {\"let\":\"P\",\"freq\":.028}, {\"let\":\"Q\",\"freq\":.0019}, {\"let\":\"R\",\"freq\":.073}, {\"let\":\"S\",\"freq\":.087}, {\"let\":\"T\",\"freq\":.067}, {\"let\":\"U\",\"freq\":.033},\r\n                    {\"let\":\"V\",\"freq\":.01}, {\"let\":\"W\",\"freq\":.0091}, {\"let\":\"X\",\"freq\":.0027}, {\"let\":\"Y\",\"freq\":.016}, {\"let\":\"Z\",\"freq\":.0044}];\r\n/*       \r\n  freqLookUp.map(litem => {\r\n   word += litem.let.repeat(Math.round(litem.freq * totalChars))\r\n  });\r\n*/\r\n  function iterate(item) {\r\n    word += item.let.repeat(Math.round(item.freq * totalChars));\r\n  }\r\n\r\n  freqLookUp.forEach(iterate);\r\n  \r\n  \r\n  if(word.length > totalChars) {\r\n      word = word.slice(0, totalChars - word.length);\r\n  }\r\n\r\n  let sortedFreqList = freqLookUp.sort((a, b) => (a.freq <= b.freq) ? 1 : -1);\r\n  \r\n  let dif = totalChars - word.length;\r\n  for(let i = 0; i < dif; i++) {\r\n    word += sortedFreqList[i].let;\r\n  }\r\n  \r\n  const dice = chunk(shuffle(word), size);\r\n  \r\n  let chars = dice.map(cube => cube[Math.floor(Math.random() * cube.length)]);\r\n  chars.sort(() => Math.random() - 0.5); // Shuffle the letters.\r\n\r\n  let grid = [];\r\n  for (let row = 0; row < size; row++) {\r\n    grid[row] = [];\r\n    for (let col = 0; col < size; ++col) {\r\n      grid[row][col] = chars[size * row + col].toLowerCase();\r\n      if (grid[row][col] === \"Q\") grid[row][col] = \"Qu\";\r\n    }\r\n  }\r\n  return grid;\r\n}\r\n\r\nfunction chunk(array, size) {\r\n  const chunked_arr = [];\r\n  let index = 0;\r\n  while (index < array.length) {\r\n    chunked_arr.push(array.slice(index, size + index));\r\n    index += size;\r\n  }\r\n  return chunked_arr;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}