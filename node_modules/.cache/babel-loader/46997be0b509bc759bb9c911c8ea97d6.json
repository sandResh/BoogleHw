{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\sandesh\\\\Desktop\\\\bogglehw\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport findAllSolutions from './solver.js';\nimport Board from './Board.js';\nimport GuessInput from './GuessInput.js';\nimport FoundSolutions from './FoundSolutions.js';\nimport SummaryResults from './SummaryResults.js';\nimport ToggleGameState from './ToggleGameState.js';\nimport logo from './logo.png';\nimport './App.css';\nimport { GAME_STATE } from './game_state_enum.js';\nimport { RandomGrid } from './randomGen.js';\n\nfunction App() {\n  _s();\n\n  const [allSolutions, setAllSolutions] = useState([]);\n  const [foundSolutions, setFoundSolutions] = useState([]);\n  const [gameState, setGameState] = useState(GAME_STATE.BEFORE);\n  const [grid, setGrid] = useState([]);\n  const [totalTime, setTotalTime] = useState(0);\n  const [size, setSize] = useState(3); // useEffect will trigger when the array items in the second argument are\n  // updated so whenever grid is updated, we will recompute the solutions\n\n  useEffect(() => {\n    const wordList = require('./full-wordlist.json');\n\n    let tmpAllSolutions = findAllSolutions(grid, wordList.words);\n    setAllSolutions(tmpAllSolutions);\n  }, [grid]); // This will run when gameState changes.\n  // When a new game is started, generate a new random grid and reset solutions\n\n  useEffect(() => {\n    if (gameState === GAME_STATE.IN_PROGRESS) {\n      setGrid(RandomGrid(size));\n      setFoundSolutions([]);\n    }\n  }, [gameState, size]);\n\n  function correctAnswerFound(answer) {\n    console.log(\"New correct answer:\" + answer);\n    setFoundSolutions([...foundSolutions, answer]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      width: \"25%\",\n      height: \"25%\",\n      class: \"logo\",\n      alt: \"Bison Boggle Logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToggleGameState, {\n      gameState: gameState,\n      setGameState: state => setGameState(state),\n      setSize: state => setSize(state),\n      setTotalTime: state => setTotalTime(state)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), gameState === GAME_STATE.IN_PROGRESS && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        board: grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GuessInput, {\n        allSolutions: allSolutions,\n        foundSolutions: foundSolutions,\n        correctAnswerCallback: answer => correctAnswerFound(answer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FoundSolutions, {\n        headerText: \"Solutions you've found\",\n        words: foundSolutions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), gameState === GAME_STATE.ENDED && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        board: grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SummaryResults, {\n        words: foundSolutions,\n        totalTime: totalTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FoundSolutions, {\n        headerText: \"Missed Words [wordsize > 3]: \",\n        words: allSolutions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"YoG2Kyf7WD8AOIpSkJtIpLLxnTg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/sandesh/Desktop/bogglehw/src/App.js"],"names":["React","useState","useEffect","findAllSolutions","Board","GuessInput","FoundSolutions","SummaryResults","ToggleGameState","logo","GAME_STATE","RandomGrid","App","allSolutions","setAllSolutions","foundSolutions","setFoundSolutions","gameState","setGameState","BEFORE","grid","setGrid","totalTime","setTotalTime","size","setSize","wordList","require","tmpAllSolutions","words","IN_PROGRESS","correctAnswerFound","answer","console","log","state","ENDED"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport findAllSolutions from './solver.js';\nimport Board from './Board.js';\nimport GuessInput from './GuessInput.js';\nimport FoundSolutions from './FoundSolutions.js';\nimport SummaryResults from './SummaryResults.js';\nimport ToggleGameState from './ToggleGameState.js';\nimport logo from './logo.png';\nimport './App.css';\nimport {GAME_STATE} from './game_state_enum.js';\nimport {RandomGrid} from './randomGen.js';\n\nfunction App() {\n\n  const [allSolutions, setAllSolutions] = useState([]);\n  const [foundSolutions, setFoundSolutions] = useState([]);\n  const [gameState, setGameState] = useState(GAME_STATE.BEFORE);\n  const [grid, setGrid] = useState([]);\n  const [totalTime, setTotalTime] = useState(0);\n  const [size, setSize] = useState(3);\n  \n  // useEffect will trigger when the array items in the second argument are\n  // updated so whenever grid is updated, we will recompute the solutions\n  useEffect(() => {\n    const wordList = require('./full-wordlist.json');\n    let tmpAllSolutions = findAllSolutions(grid, wordList.words);\n    setAllSolutions(tmpAllSolutions);\n  }, [grid]);\n\n  // This will run when gameState changes.\n  // When a new game is started, generate a new random grid and reset solutions\n  useEffect(() => {\n    if (gameState === GAME_STATE.IN_PROGRESS) {\n      setGrid(RandomGrid(size));\n      setFoundSolutions([]);\n    }\n  }, [gameState, size]);\n\n  function correctAnswerFound(answer) {\n    console.log(\"New correct answer:\" + answer);\n    setFoundSolutions([...foundSolutions, answer]);\n  }\n\n  return (\n    <div className=\"App\">\n      \n        <img src={logo}  width=\"25%\" height=\"25%\" class=\"logo\" alt=\"Bison Boggle Logo\" /> \n\n        <ToggleGameState gameState={gameState}\n                       setGameState={(state) => setGameState(state)} \n                       setSize={(state) => setSize(state)}\n                       setTotalTime={(state) => setTotalTime(state)}/>\n\n      { gameState === GAME_STATE.IN_PROGRESS &&\n        <div>\n          <Board board={grid} />\n\n          <GuessInput allSolutions={allSolutions}\n                      foundSolutions={foundSolutions}\n                      correctAnswerCallback={(answer) => correctAnswerFound(answer)}/>\n          <FoundSolutions headerText=\"Solutions you've found\" words={foundSolutions} />\n        </div>\n      }\n      { gameState === GAME_STATE.ENDED &&\n        <div>\n          <Board board={grid} />\n          <SummaryResults words={foundSolutions} totalTime={totalTime} />\n          <FoundSolutions headerText=\"Missed Words [wordsize > 3]: \" words={allSolutions}  />\n          \n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}